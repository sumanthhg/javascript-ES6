// javascript return unique array of objects by key (age) ES6
array.filter((value, index, self) => self.map(x => x.age).indexOf(value.age) == index);
--------------------------------------------------------------------------------------------
setInterval(): executes a function, over and over again, at specified time intervals
setTimeout() : executes a function, once, after waiting a specified number of milliseconds
--------------------------------------------------------------------------------------------------------
// javascript return object from deep nested array of object ES6

var json = [{"title":"some title","channel_id":"123we","options":[{"channel_id":"abc","image":"http://asdasd.com/all-inclusive-block-img.jpg","title":"All-Inclusive","options":[{"channel_id":"dsa2","title":"Some Recommends","options":[{"image":"http://www.asdasd.com","title":"Sandals","id":1}]}]}]}];

function findKeyAndValue(theObject,keytobeFind,valuetomatch){
  let result = null;
    if(theObject.hasOwnProperty(keytobeFind) && theObject[keytobeFind] == valuetomatch){
        return theObject;
    }
        Object.keys(theObject).map((key,index) =>{
          if(theObject[key] instanceof Object || theObject[key] instanceof Array){
            var o = findKeyAndValue(theObject[key],keytobeFind,valuetomatch);
            if(o && o != null){
              result = o;
            }
        }
        })
    return result;
}
console.log(findKeyAndValue(json,'id','1'));

-----------------------------------------------------------------------------------------
// javascript return Largest + or - number from given number ES6

function createLargestNumberByGivenNumber(number,givenNum){
      number = `${number}`.split('');
      let lesserNum = null;
       lesserNum =  parseInt(number) > 0 ? number.find(num => parseInt(num) < parseInt(givenNum)) 
                     : number.find(num => parseInt(num) > parseInt(givenNum));
      let lesserNumIndex = number.indexOf(lesserNum);
      if(lesserNumIndex != -1){
          number.splice(lesserNumIndex, 0, parseInt(givenNum));
          number = number.join('');
      }else{
        number.splice(number.length, 0, parseInt(givenNum));
        number = number.join('');
      }
      return  parseInt(number);
}

console.log(createLargestNumberByGivenNumber(6832,5));
console.log(createLargestNumberByGivenNumber(123,5));
console.log(createLargestNumberByGivenNumber(-6832,7));
console.log(createLargestNumberByGivenNumber(-9999,5));

--------------------------------------------------------------------------------------------------
// javascript return chunk of array from given number chunkSize ES6

Object.defineProperty(Array.prototype, 'arrayIntoChunksBySize', {
  value: function(chunkSize) {
    let array = this;
    return [].concat.apply([],
      array.map((elem, i) => {
        return i % chunkSize ? [] : [array.slice(i, i + chunkSize)];
      })
    );
  }
});

console.log([1, 2, 3, 4, 5, 6, 7, 8, 9].arrayIntoChunksBySize(3));

